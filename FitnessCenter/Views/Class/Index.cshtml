﻿@using FitnessCenter.Services.Data.Interfaces
@using FitnessCenter.Web.Infrastructure.Extensions
@using FitnessCenter.Web.ViewModels.Class
@using static FitnessCenter.Common.ErrorMessages.Plans
@using static FitnessCenter.Common.EntityValidationConstants.Class

@model AllClassesSearchFilterViewModel

@inject IManagerService managerService

@if (TempData[nameof(AddToPlansNotSuccessfullMessage)] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData[nameof(AddToPlansNotSuccessfullMessage)]
    </div>
}

<h2>Classes</h2>

<form method="get" asp-action="Index" class="mb-4">
    <div class="row">
        <div class="col">
            <input asp-for="SearchQuery" class="form-control" placeholder="Search by title..." />
        </div>
        <div class="col">
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>
    </div>
</form>

@if (await this.managerService.IsUserManagerAsync(this.User.GetUserId()))
{
    <a asp-action="Manage" class="btn btn-outline-primary mb-4">Mange Classes</a>
}

<table class="table table-striped">
    <thead>
        <tr>
            <th>Title</th>
            <th>Starting Date</th>
            <th>Duration</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Classes != null)
        {
            @foreach (AllClassesIndexViewModel classM in Model.Classes)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(classM.ImageUrl))
                        {
                            <img src="@classM.ImageUrl" alt="@classM.Title" style="width: 100px; height: auto;" />
                        }
                        else
                        {
                            <span>No Image Available</span>
                        }
                    </td>
                    <td>@classM.Title</td>
                    <td>@classM.StartingDate</td>
                    <td>@classM.Duration minutes</td>
                    <td>
                        <a asp-action="Details" asp-route-id="@classM.Id" class="btn btn-info">Details</a>

                        @if (User?.Identity?.IsAuthenticated ?? false)
                        {
                            <form asp-controller="Plan" asp-action="AddToPlans" method="post" class="d-inline">
                                <input type="hidden" name="classId" value="@classM.Id" />
                                <button type="submit" class="btn btn-warning">+Add To Plans</button>
                            </form>

                            @if (await this.managerService.IsUserManagerAsync(this.User.GetUserId()))
                            {
                                <a asp-action="AddToProgram" asp-route-id="@classM.Id" class="btn btn-info">Add to Program</a>
                                <a asp-action="Edit" asp-route-id="@classM.Id" class="btn btn-primary">Edit</a>
                                <a asp-action="Delete" asp-route-id="@classM.Id" class="btn btn-danger">Delete</a>
                            }
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (User?.Identity?.IsAuthenticated ?? false)
{
    @if (await this.managerService.IsUserManagerAsync(this.User.GetUserId()))
    {
        <div class="pb-3">
            <a asp-action="Create" class="btn btn-primary">Add New Class</a>
            </div>
        
    }
}


<nav aria-label="Page navigation" class="mt-4">
    <ul class="pagination">
        @if (Model.CurrentPage > 1)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index"
                   asp-route-currentPage="@(Model.CurrentPage - 1)"
                   asp-route-searchQuery="@Model.SearchQuery">
                    Previous
                </a>
            </li>
        }

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                <a class="page-link" asp-action="Index"
                   asp-route-currentPage="@i"
                   asp-route-searchQuery="@Model.SearchQuery">
                    @i
                </a>
            </li>
        }

        @if (Model.CurrentPage < Model.TotalPages)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index"
                   asp-route-currentPage="@(Model.CurrentPage + 1)"
                   asp-route-searchQuery="@Model.SearchQuery">
                    Next
                </a>
            </li>
        }
    </ul>
</nav>